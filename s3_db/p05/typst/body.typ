= Мета

- Вивчити правила побудови ідентифікаторів, правила визначення змінних та типів. Визначити правила роботи з циклами та
  умовними конструкціями, роботу зі змінними типу Table.
- Вивчити синтаксис та семантику функцій та збережених процедур, способів їх ідентифікації, методів визначення та
  специфікації параметрів та значень, котрі повертаються, виклик функцій та збережених процедур.
- Застосування команд для створення, зміни та видалення як скалярних, так і табличних функцій, збережених процедур.
- Вивчити призначення та типи курсорів, синтаксис та семантику команд мови SQL для створення курсорів, вибірки даних з
  курсорів, зміни даних із застосуванням курсорів.
- Вивчити призначення та типи тригерів, умов їх активації, синтаксису та семантики для їх створення, модифікації,
  перейменування, програмування та видалення.

= Постановка задачі

#show raw: set text(size: 0.5em)

== Збережені процедури

+ створення процедури, в якій використовується тимчасова таблиця, котра створена через змінну типу TABLE

  #text(fill: green)[>] #text(fill: gray)[Створити кеш відвідувань]

  #raw(lang: "sql", read("../sql/1a-temporary.sql"))

+ створення процедури з використанням умовної конструкції IF

  #text(fill: green)[>] #text(fill: gray)[Порахувати ціну за пропозицію враховуючи послуги агента]

  #raw(lang: "sql", read("../sql/1b-if.sql"))

+ створення процедури з використанням циклу WHILE

  #text(fill: green)[>] #text(fill: gray)[Оновити ціни на нерухомість враховуючи 4% інфляції]

  #raw(lang: "sql", read("../sql/1c-while.sql"))

+ створення процедури без параметрів

  #text(fill: green)[>] #text(fill: gray)[Розрахувати валовий дохід (без налогу) за рік]

  #raw(lang: "sql", read("../sql/1d-void.sql"))

+ створення процедури з вхідним параметром та RETURN

  #text(fill: green)[>] #text(fill: gray)[Вивести користувача]

  #raw(lang: "sql", read("../sql/1e-inout.sql"))

+ створення процедури оновлення даних в деякій таблиці БД

  #text(fill: green)[>] #text(fill: gray)[Оновити стан пропозиції]

  #raw(lang: "sql", read("../sql/1f-update.sql"))

+ створення процедури, в котрій робиться вибірка даних

  #text(fill: green)[>] #text(fill: gray)[Створити кортеж з короткою інформацією про пропозицію]

  #raw(lang: "sql", read("../sql/1g-select.sql"))

== Функції

+ створити функцію, котра повертає деяке скалярне значення

  #text(fill: green)[>] #text(fill: gray)[Обрахувати кількість пропозицій]

  #raw(lang: "sql", read("../sql/2a-scalar.sql"))

+ створити функцію, котра повертає таблицю з динамічним набором стовпців

  #text(fill: green)[>] #text(fill: gray)[Знайти пропозиції створені після дати]
  #footnote[PostgreSQL строго типізована, тому фізично не може повернути таблицю з динамічними стовпцями (в якості альтернативи
    можна використати json-аггрегатор)]

  #raw(lang: "sql", read("../sql/2b-dynamic.sql"))

+ створити функцію, котра повертає таблицю наперед заданої структури

  #text(fill: green)[>] #text(fill: gray)[Повернути лише публічні дані про обліковий запис для профілю]

  #raw(lang: "sql", read("../sql/2c-table.sql"))

== Робота з курсорами

+ створення курсору
+ відкриття курсору
+ вибірка даних
+ робота з курсорами

  #text(fill: green)[>] #text(fill: gray)[Виконати дії над всіма пропозиціями ефективно використовуючи пам'ять]

  #raw(lang: "sql", read("../sql/3abcd-cursor.sql"))

== Робота з тригерами

+ створити тригер, котрий буде спрацьовувати при видаленні даних

  #text(fill: green)[>] #text(fill: gray)[Забезпечити відсутність сиріт у поліморфній сутності]

  #raw(lang: "sql", read("../sql/4a-delete.sql"))

+ створити тригер, котрий буде спрацьовувати при модифікації даних

  #text(fill: green)[>] #text(fill: gray)[Запобігти зміні типу батьківскього первинного ключа]

  #raw(lang: "sql", read("../sql/4b-update.sql"))

+ створити тригер, котрий буде спрацьовувати при додаванні даних

  #text(fill: green)[>] #text(fill: gray)[Запобігти накладкам у розкладі візитів]

  #raw(lang: "sql", read("../sql/4c-insert.sql"))
