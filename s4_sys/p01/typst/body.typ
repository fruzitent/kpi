= Завдання

1. Для програми, наведеної вище, створити файл типу .asm. Ця програма не має засобів виводу даних, тому правильність її
  виконання треба перевірити за допомогою td.exe.
2. Скомпілювати програму, включивши потрібні опції для налагоджувача та створення файлу лістингу типу .lst.
3. Ознайомитись зі структурою файлу .lst. За вказівкою викладача, для певної команди асемблера розглянути структуру
  машинної команди і навести її у звіті.
4. Скомпонувати .obj-файл програми. Включити опції для налагодження та створення .map-файлу.
5. Занести до звіту адреси початку та кінця всіх сегментів з .map-файлу.
6. Завантажити до налагоджувача td.exe одержаний .exe-файл програми.
7. У вікні CPU у полі DUMP знайти початкову адресу сегмента даних та записати його до звіту. Знайти масиви SOURCE та DEST.
  Дані у масиві SOURCE подаються у шістнадцятковій системі.
8. У покроковому режимі за допомогою клавіші F7 виконати програму. Одержані результати у масиві DEST показати викладачеві.

#show raw: set text(size: 0.5em)

= Текст програми

Розроблена програма виконує роль першого етапу (16-розрядний реальний режим) завантажувача для архітектури x86_64.

#raw(lang: "asm", read("../src/main.asm"))

#raw(lang: "asm", read("../src/setup.ld"))

#raw(lang: "asm", read("../justfile"))

= Введені та отримані результати

Для налагодження було використано формат ELF32, віртуальну машину QEMU у режимі сумісності з i386 та відладчик GDB з
додатковими налаштуваннями для підтримки реального режиму.

Щоб запустити QEMU очікуючи з'єднання з GDB, потрібно додати прапори *-s -S*.

#raw(lang: "log", read("../src/00-example.sh.log"))

Аналіз дампу пам'яті за адресою 0x000000e0 показує нульову ініціалізацію масиву *dest* з подальшим його заповненням.

#raw(lang: "asm", read("../target/debug/main.lst"))
